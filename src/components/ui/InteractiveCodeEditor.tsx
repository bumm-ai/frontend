'use client';

import { motion } from 'framer-motion';
import { Code, Edit3 } from 'lucide-react';
import { useState, useEffect } from 'react';
import { CodeSource } from '@/types/dashboard';
import { CodeGenerationStages } from './CodeGenerationStages';
import Prism from 'prismjs';
import 'prismjs/components/prism-rust';

interface InteractiveCodeEditorProps {
  initialCode?: string;
  onCodeChange: (code: string, source: CodeSource) => void;
  placeholder?: string;
  isGenerating?: boolean;
  onGenerationComplete?: () => void;
  onAddAIMessage?: (message: string) => void;
  context?: string; // Context for determining contract type
  isTablet?: boolean;
}

export const InteractiveCodeEditor = ({ 
  initialCode = '', 
  onCodeChange, 
  placeholder = "Paste your smart contract here or wait for AI to generate one...",
  isGenerating = false,
  onGenerationComplete,
  onAddAIMessage,
  context,
  isTablet = false
}: InteractiveCodeEditorProps) => {
  const [code, setCode] = useState(initialCode);
  const [isEditing, setIsEditing] = useState(false);
  const [source, setSource] = useState<CodeSource>('empty');

  // Track when code was generated by AI (not by user)
  useEffect(() => {
    if (isGenerating && initialCode) {
      setCode(initialCode);
      setSource('ai-generated');
      onCodeChange(initialCode, 'ai-generated');
    }
  }, [isGenerating, initialCode]);

  useEffect(() => {
    // Initialize PrismJS on client side
    if (typeof window !== 'undefined') {
      import('prismjs').then((Prism) => {
        // Force re-highlight if needed
        if (code) {
          setCode(code); // Trigger re-render
        }
      });
    }
  }, []);

  const handleCodeChange = (newCode: string) => {
    setCode(newCode);
    const newSource: CodeSource = newCode.trim() === '' ? 'empty' : 'user-input';
    setSource(newSource);
    onCodeChange(newCode, newSource);
    
    // Force re-highlight after state update
    setTimeout(() => {
      if (typeof window !== 'undefined' && Prism.languages.rust) {
        const codeElements = document.querySelectorAll('.language-rust');
        codeElements.forEach(element => {
          if (element.textContent) {
            element.innerHTML = Prism.highlight(element.textContent, Prism.languages.rust, 'rust');
          }
        });
      }
    }, 0);
  };


  const handleGenerationComplete = (generatedCode: string) => {
    setCode(generatedCode);
    setSource('ai-generated');
    onCodeChange(generatedCode, 'ai-generated');
    onGenerationComplete?.();
  };

  const highlightCode = (code: string) => {
    if (typeof window !== 'undefined' && Prism.languages.rust) {
      try {
        return Prism.highlight(code, Prism.languages.rust, 'rust');
      } catch (error) {
        console.warn('Prism highlighting failed:', error);
        return code;
      }
    }
    return code;
  };

  const defaultCode = `use anchor_lang::prelude::*;

declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");

#[program]
pub mod my_contract {
    use super::*;

    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {
        // Contract logic will appear here
        Ok(())
    }
}`;

  const displayCode = code || (source === 'ai-generated' ? defaultCode : '');

  if (isGenerating) {
    return (
      <CodeGenerationStages 
        isGenerating={isGenerating}
        onComplete={handleGenerationComplete}
        onAddAIMessage={onAddAIMessage}
        context={context || ''}
      />
    );
  }

  if (!displayCode && !isEditing) {
    return (
      <div 
        className="h-full flex flex-col items-center justify-center text-center text-[#666] cursor-pointer hover:bg-[#191919] rounded-lg transition-colors"
        onClick={() => setIsEditing(true)}
      >
        <Code className="w-12 h-12 mx-auto mb-4 text-[#333]" />
        <p className="text-sm mb-2">No smart contract yet</p>
        <p className="text-xs text-[#555]">Click here to paste your code or chat with AI to generate one</p>
      </div>
    );
  }

  return (
    <>
        <style jsx global>{`
          .language-rust .token.comment { 
            color: #6a9955 !important; 
            font-style: italic;
          }
          .language-rust .token.string { 
            color: #ce9178 !important; 
          }
          .language-rust .token.keyword { 
            color: #569cd6 !important; 
            font-weight: 600;
          }
          .language-rust .token.function { 
            color: #dcdcaa !important; 
            font-weight: 500;
          }
          .language-rust .token.operator { 
            color: #d4d4d4 !important; 
            font-weight: 500;
          }
          .language-rust .token.punctuation { 
            color: #d4d4d4 !important; 
          }
          .language-rust .token.number { 
            color: #b5cea8 !important; 
          }
          .language-rust .token.boolean { 
            color: #569cd6 !important; 
            font-weight: 600;
          }
          .language-rust .token.constant { 
            color: #4fc1ff !important; 
            font-weight: 500;
          }
          .language-rust .token.attribute { 
            color: #92c5f8 !important; 
          }
          .language-rust .token.macro { 
            color: #c586c0 !important; 
            font-weight: 500;
          }
          .language-rust .token.lifetime { 
            color: #4ec9b0 !important; 
            font-weight: 500;
          }
          .language-rust .token.type { 
            color: #4ec9b0 !important; 
            font-weight: 500;
          }
          .language-rust .token.variable { 
            color: #9cdcfe !important; 
          }
          .language-rust .token.class-name { 
            color: #4ec9b0 !important; 
            font-weight: 500;
          }
          .language-rust .token.builtin { 
            color: #569cd6 !important; 
          }
          .language-rust .token.regex { 
            color: #d16969 !important; 
          }
          .language-rust .token.char { 
            color: #ce9178 !important; 
          }
          .language-rust .token.attr-name { 
            color: #92c5f8 !important; 
          }
          .language-rust .token.attr-value { 
            color: #ce9178 !important; 
          }
          .language-rust .token.namespace { 
            color: #4ec9b0 !important; 
          }
          .language-rust .token.important { 
            color: #569cd6 !important; 
            font-weight: 600;
          }
        `}</style>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex gap-3 h-full"
      >
      <div className="w-8 h-8 rounded-full bg-[#191919] flex items-center justify-center flex-shrink-0">
        {source === 'user-input' ? (
          <Edit3 className="w-4 h-4 text-blue-500" />
        ) : (
          <Code className="w-4 h-4 text-orange-500" />
        )}
      </div>
      <div className="flex-1 flex flex-col min-h-0">
            <div className="bg-[#191919] border border-[#333] rounded-lg overflow-hidden flex-1 flex flex-col relative overflow-x-hidden md:overflow-x-auto h-full">
          <>
            <div className="text-gray-400 text-xs p-3 pb-2 border-b border-[#333] flex-shrink-0">
              {`// ${source === 'user-input' ? 'Your Smart Contract' : 'Generated Smart Contract'}`}
            </div>
            <div 
              className="w-full h-full p-3 cursor-text overflow-y-auto bg-[#0a0a0a] flex flex-col code-editor"
              onClick={() => !isEditing && setIsEditing(true)}
            >
              {isEditing ? (
                <textarea
                  value={code}
                  onChange={(e) => handleCodeChange(e.target.value)}
                  onBlur={() => setIsEditing(false)}
                  placeholder={placeholder}
                  className={`flex-1 w-full bg-transparent text-gray-300 font-mono text-[9px] resize-none focus:outline-none leading-relaxed overflow-x-hidden md:overflow-x-auto whitespace-pre-wrap m-0 p-0 border-0 ${isTablet ? 'text-[8px]' : ''}`}
                  autoFocus
                />
              ) : (
                <pre className={`flex-1 w-full font-mono text-[9px] text-gray-300 leading-relaxed whitespace-pre-wrap overflow-x-auto md:overflow-x-auto overflow-x-hidden m-0 ${isTablet ? 'text-[8px]' : ''}`}>
                  <code 
                    className="language-rust block w-full h-full"
                    dangerouslySetInnerHTML={{ 
                      __html: highlightCode(displayCode) 
                    }}
                  />
                </pre>
              )}
            </div>
          </>
        </div>
        <div className="text-xs text-[#666] mt-1 flex-shrink-0">
          {source === 'user-input' ? 'Pasted by you' : 'Generated'} â€¢ {new Date().toLocaleTimeString()}
        </div>
      </div>
      </motion.div>
    </>
  );
};
